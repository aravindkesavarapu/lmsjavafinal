package com.capgemini.lmsspringrest.dao;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.PersistenceUnit;
import javax.persistence.TypedQuery;

import org.springframework.stereotype.Repository;

import com.capgemini.lmsspringrest.dto.BookDetails;
import com.capgemini.lmsspringrest.dto.BookIssue;
import com.capgemini.lmsspringrest.dto.BooksBorrowed;
import com.capgemini.lmsspringrest.dto.RequestDetails;
import com.capgemini.lmsspringrest.dto.User;
import com.capgemini.lmsspringrest.exception.LMSException;

@Repository
public class AdminDAOImplementation implements AdminDAO {

	@PersistenceUnit
	EntityManagerFactory factory;

	@Override
	public boolean addBook(BookDetails bookInfo) {
		EntityManager manager = null;
		EntityTransaction transaction = null;
		try {
			manager = factory.createEntityManager();
			transaction = manager.getTransaction();
			transaction.begin();
			manager.persist(bookInfo);
			transaction.commit();
			return true;
		} catch (Exception e) {
			System.err.println(e.getMessage());
			transaction.rollback();
			return false;
		} finally {
			manager.close();
		}
	}

	@Override
	public boolean removeBook(int bookId) {
		EntityManager manager = null;
		EntityTransaction transaction = null;
		try {
			manager = factory.createEntityManager();
			transaction = manager.getTransaction();
			transaction.begin();
			BookDetails bookInfoRecord = manager.find(BookDetails.class, bookId);
			if(bookInfoRecord)
			manager.remove(bookInfoRecord);
			transaction.commit();
			return true;
		} catch (Exception e) {
			System.err.println(e.getMessage());
			transaction.rollback();
			return false;
		} finally {
			manager.close();
		}
	}

	@Override
	public boolean updateBook(BookDetails book) {
		EntityManager manager = null;
		EntityTransaction transaction = null;
		try {
			manager = factory.createEntityManager();
			transaction = manager.getTransaction();
			transaction.begin();
			BookDetails record = manager.find(BookDetails.class, book.getBookId());
			record.setBookName(book.getBookName());
			transaction.commit();
			return true;
		} catch (Exception e) {
			System.err.println(e.getMessage());
			transaction.rollback();
			return false;
		} finally {
			manager.close();
		}
	}

	@Override
	public boolean bookIssue(int id, int bookId) {
		EntityManager manager = null;
		EntityTransaction transaction = null;
		try {
			manager = factory.createEntityManager();
			transaction = manager.getTransaction();
			String jpqlIssue = "select b from BookDetails b where b.bookId=:bookId";
			TypedQuery<BookDetails> bookDetailsQuery = manager.createQuery(jpqlIssue, BookDetails.class);
			bookDetailsQuery.setParameter("bookId", bookId);
			List<BookDetails> bookDetailsList = bookDetailsQuery.getResultList();
			if (bookDetailsList != null) {
				String jpqlReq = "select r from RequestDetails r where r.uId=:uId and r.bookId=:bookId";
				TypedQuery<RequestDetails> query1 = manager.createQuery(jpqlReq, RequestDetails.class);
				query1.setParameter("uId", id);
				query1.setParameter("bookId", bookId);
				List<RequestDetails> rs1 = query1.getResultList();
				System.out.println(rs1.size());
				if (rs1.size() != 0) {
					transaction.begin();
					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
					Calendar cal = Calendar.getInstance();
					String issueDate = sdf.format(cal.getTime());
					cal.add(Calendar.DAY_OF_MONTH, 7);
					String returnDate = sdf.format(cal.getTime());
					System.out.println(returnDate);
					BookIssue issueBook = new BookIssue();
					issueBook.setUId(id);
					issueBook.setBookId(bookId);
					issueBook.setIssueDate(java.sql.Date.valueOf(issueDate));
					issueBook.setReturnDate(java.sql.Date.valueOf(returnDate));
					manager.persist(issueBook);
					transaction.commit();
					if (!rs1.isEmpty() && rs1 != null) {
						transaction.begin();
						BookDetails book = manager.find(BookDetails.class, bookId);
						BooksBorrowed borrowedBooks = new BooksBorrowed();
						borrowedBooks.setBookId(bookId);
						borrowedBooks.setBookName(book.getBookName());
						borrowedBooks.setUId(id);
						manager.persist(borrowedBooks);
						transaction.commit();
						return true;
					} else {
						throw new LMSException("Book Not issued");
					}
				} else {
					throw new LMSException("The respective user have not placed any request");
				}
			} else {
				throw new LMSException("There is no book exist with bookId" + bookId);
			}
		} catch (Exception e) {
			System.err.println(e.getMessage());
			transaction.rollback();
			return false;
		} finally {
			manager.close();
		}

	}

	@Override
	public List<RequestDetails> showRequests() {

		EntityManager manager = null;
		List<RequestDetails> recordList = null;
		try {
			manager = factory.createEntityManager();
			String jpql = "select r from RequestDetails r";
			TypedQuery<RequestDetails> query = manager.createQuery(jpql, RequestDetails.class);
			recordList = query.getResultList();

		} catch (Exception e) {

			throw new LMSException("Books Are not Requested");

		}
		return recordList;
	}

	@Override
	public List<BookIssue> showIssuedBooks() {
		EntityManager manager = null;
		List<BookIssue> recordList = null;

		try {
			manager = factory.createEntityManager();
			String jpql = "select b from BookIssue b";
			TypedQuery<BookIssue> query = manager.createQuery(jpql, BookIssue.class);
			recordList = query.getResultList();

		} catch (Exception e) {
			System.err.println("No Books are Issued");
		} finally {
			manager.close();
		}

		return recordList;
	}

	@Override
	public List<User> showUsers() {
		EntityManager manager = null;
		List<User> recordList = null;
		try {
			manager = factory.createEntityManager();
			String jpql = "select u from User u";
			TypedQuery<User> query = manager.createQuery(jpql, User.class);
			recordList = query.getResultList();

		} catch (Exception e) {
			System.err.println("No Users Found");
		} finally {
			manager.close();
		}
		return recordList;

	}

}
